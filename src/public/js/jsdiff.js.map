{"version":3,"file":"/js/jsdiff.js","mappings":"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","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./node_modules/diff/lib/index.mjs","webpack:///./resources/js/jsdiff.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","function Diff() {}\nDiff.prototype = {\n  diff: function diff(oldString, newString) {\n    var _options$timeout;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var callback = options.callback;\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    this.options = options;\n    var self = this;\n\n    function done(value) {\n      if (callback) {\n        setTimeout(function () {\n          callback(undefined, value);\n        }, 0);\n        return true;\n      } else {\n        return value;\n      }\n    } // Allow subclasses to massage the input prior to running\n\n\n    oldString = this.castInput(oldString);\n    newString = this.castInput(newString);\n    oldString = this.removeEmpty(this.tokenize(oldString));\n    newString = this.removeEmpty(this.tokenize(newString));\n    var newLen = newString.length,\n        oldLen = oldString.length;\n    var editLength = 1;\n    var maxEditLength = newLen + oldLen;\n\n    if (options.maxEditLength) {\n      maxEditLength = Math.min(maxEditLength, options.maxEditLength);\n    }\n\n    var maxExecutionTime = (_options$timeout = options.timeout) !== null && _options$timeout !== void 0 ? _options$timeout : Infinity;\n    var abortAfterTimestamp = Date.now() + maxExecutionTime;\n    var bestPath = [{\n      oldPos: -1,\n      lastComponent: undefined\n    }]; // Seed editLength = 0, i.e. the content starts with the same values\n\n    var newPos = this.extractCommon(bestPath[0], newString, oldString, 0);\n\n    if (bestPath[0].oldPos + 1 >= oldLen && newPos + 1 >= newLen) {\n      // Identity per the equality and tokenizer\n      return done([{\n        value: this.join(newString),\n        count: newString.length\n      }]);\n    } // Once we hit the right edge of the edit graph on some diagonal k, we can\n    // definitely reach the end of the edit graph in no more than k edits, so\n    // there's no point in considering any moves to diagonal k+1 any more (from\n    // which we're guaranteed to need at least k+1 more edits).\n    // Similarly, once we've reached the bottom of the edit graph, there's no\n    // point considering moves to lower diagonals.\n    // We record this fact by setting minDiagonalToConsider and\n    // maxDiagonalToConsider to some finite value once we've hit the edge of\n    // the edit graph.\n    // This optimization is not faithful to the original algorithm presented in\n    // Myers's paper, which instead pointlessly extends D-paths off the end of\n    // the edit graph - see page 7 of Myers's paper which notes this point\n    // explicitly and illustrates it with a diagram. This has major performance\n    // implications for some common scenarios. For instance, to compute a diff\n    // where the new text simply appends d characters on the end of the\n    // original text of length n, the true Myers algorithm will take O(n+d^2)\n    // time while this optimization needs only O(n+d) time.\n\n\n    var minDiagonalToConsider = -Infinity,\n        maxDiagonalToConsider = Infinity; // Main worker method. checks all permutations of a given edit length for acceptance.\n\n    function execEditLength() {\n      for (var diagonalPath = Math.max(minDiagonalToConsider, -editLength); diagonalPath <= Math.min(maxDiagonalToConsider, editLength); diagonalPath += 2) {\n        var basePath = void 0;\n        var removePath = bestPath[diagonalPath - 1],\n            addPath = bestPath[diagonalPath + 1];\n\n        if (removePath) {\n          // No one else is going to attempt to use this value, clear it\n          bestPath[diagonalPath - 1] = undefined;\n        }\n\n        var canAdd = false;\n\n        if (addPath) {\n          // what newPos will be after we do an insertion:\n          var addPathNewPos = addPath.oldPos - diagonalPath;\n          canAdd = addPath && 0 <= addPathNewPos && addPathNewPos < newLen;\n        }\n\n        var canRemove = removePath && removePath.oldPos + 1 < oldLen;\n\n        if (!canAdd && !canRemove) {\n          // If this path is a terminal then prune\n          bestPath[diagonalPath] = undefined;\n          continue;\n        } // Select the diagonal that we want to branch from. We select the prior\n        // path whose position in the old string is the farthest from the origin\n        // and does not pass the bounds of the diff graph\n        // TODO: Remove the `+ 1` here to make behavior match Myers algorithm\n        //       and prefer to order removals before insertions.\n\n\n        if (!canRemove || canAdd && removePath.oldPos + 1 < addPath.oldPos) {\n          basePath = self.addToPath(addPath, true, undefined, 0);\n        } else {\n          basePath = self.addToPath(removePath, undefined, true, 1);\n        }\n\n        newPos = self.extractCommon(basePath, newString, oldString, diagonalPath);\n\n        if (basePath.oldPos + 1 >= oldLen && newPos + 1 >= newLen) {\n          // If we have hit the end of both strings, then we are done\n          return done(buildValues(self, basePath.lastComponent, newString, oldString, self.useLongestToken));\n        } else {\n          bestPath[diagonalPath] = basePath;\n\n          if (basePath.oldPos + 1 >= oldLen) {\n            maxDiagonalToConsider = Math.min(maxDiagonalToConsider, diagonalPath - 1);\n          }\n\n          if (newPos + 1 >= newLen) {\n            minDiagonalToConsider = Math.max(minDiagonalToConsider, diagonalPath + 1);\n          }\n        }\n      }\n\n      editLength++;\n    } // Performs the length of edit iteration. Is a bit fugly as this has to support the\n    // sync and async mode which is never fun. Loops over execEditLength until a value\n    // is produced, or until the edit length exceeds options.maxEditLength (if given),\n    // in which case it will return undefined.\n\n\n    if (callback) {\n      (function exec() {\n        setTimeout(function () {\n          if (editLength > maxEditLength || Date.now() > abortAfterTimestamp) {\n            return callback();\n          }\n\n          if (!execEditLength()) {\n            exec();\n          }\n        }, 0);\n      })();\n    } else {\n      while (editLength <= maxEditLength && Date.now() <= abortAfterTimestamp) {\n        var ret = execEditLength();\n\n        if (ret) {\n          return ret;\n        }\n      }\n    }\n  },\n  addToPath: function addToPath(path, added, removed, oldPosInc) {\n    var last = path.lastComponent;\n\n    if (last && last.added === added && last.removed === removed) {\n      return {\n        oldPos: path.oldPos + oldPosInc,\n        lastComponent: {\n          count: last.count + 1,\n          added: added,\n          removed: removed,\n          previousComponent: last.previousComponent\n        }\n      };\n    } else {\n      return {\n        oldPos: path.oldPos + oldPosInc,\n        lastComponent: {\n          count: 1,\n          added: added,\n          removed: removed,\n          previousComponent: last\n        }\n      };\n    }\n  },\n  extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {\n    var newLen = newString.length,\n        oldLen = oldString.length,\n        oldPos = basePath.oldPos,\n        newPos = oldPos - diagonalPath,\n        commonCount = 0;\n\n    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\n      newPos++;\n      oldPos++;\n      commonCount++;\n    }\n\n    if (commonCount) {\n      basePath.lastComponent = {\n        count: commonCount,\n        previousComponent: basePath.lastComponent\n      };\n    }\n\n    basePath.oldPos = oldPos;\n    return newPos;\n  },\n  equals: function equals(left, right) {\n    if (this.options.comparator) {\n      return this.options.comparator(left, right);\n    } else {\n      return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();\n    }\n  },\n  removeEmpty: function removeEmpty(array) {\n    var ret = [];\n\n    for (var i = 0; i < array.length; i++) {\n      if (array[i]) {\n        ret.push(array[i]);\n      }\n    }\n\n    return ret;\n  },\n  castInput: function castInput(value) {\n    return value;\n  },\n  tokenize: function tokenize(value) {\n    return value.split('');\n  },\n  join: function join(chars) {\n    return chars.join('');\n  }\n};\n\nfunction buildValues(diff, lastComponent, newString, oldString, useLongestToken) {\n  // First we convert our linked list of components in reverse order to an\n  // array in the right order:\n  var components = [];\n  var nextComponent;\n\n  while (lastComponent) {\n    components.push(lastComponent);\n    nextComponent = lastComponent.previousComponent;\n    delete lastComponent.previousComponent;\n    lastComponent = nextComponent;\n  }\n\n  components.reverse();\n  var componentPos = 0,\n      componentLen = components.length,\n      newPos = 0,\n      oldPos = 0;\n\n  for (; componentPos < componentLen; componentPos++) {\n    var component = components[componentPos];\n\n    if (!component.removed) {\n      if (!component.added && useLongestToken) {\n        var value = newString.slice(newPos, newPos + component.count);\n        value = value.map(function (value, i) {\n          var oldValue = oldString[oldPos + i];\n          return oldValue.length > value.length ? oldValue : value;\n        });\n        component.value = diff.join(value);\n      } else {\n        component.value = diff.join(newString.slice(newPos, newPos + component.count));\n      }\n\n      newPos += component.count; // Common case\n\n      if (!component.added) {\n        oldPos += component.count;\n      }\n    } else {\n      component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));\n      oldPos += component.count; // Reverse add and remove so removes are output first to match common convention\n      // The diffing algorithm is tied to add then remove output and this is the simplest\n      // route to get the desired output with minimal overhead.\n\n      if (componentPos && components[componentPos - 1].added) {\n        var tmp = components[componentPos - 1];\n        components[componentPos - 1] = components[componentPos];\n        components[componentPos] = tmp;\n      }\n    }\n  } // Special case handle for when one terminal is ignored (i.e. whitespace).\n  // For this case we merge the terminal into the prior string and drop the change.\n  // This is only available for string mode.\n\n\n  var finalComponent = components[componentLen - 1];\n\n  if (componentLen > 1 && typeof finalComponent.value === 'string' && (finalComponent.added || finalComponent.removed) && diff.equals('', finalComponent.value)) {\n    components[componentLen - 2].value += finalComponent.value;\n    components.pop();\n  }\n\n  return components;\n}\n\nvar characterDiff = new Diff();\nfunction diffChars(oldStr, newStr, options) {\n  return characterDiff.diff(oldStr, newStr, options);\n}\n\nfunction generateOptions(options, defaults) {\n  if (typeof options === 'function') {\n    defaults.callback = options;\n  } else if (options) {\n    for (var name in options) {\n      /* istanbul ignore else */\n      if (options.hasOwnProperty(name)) {\n        defaults[name] = options[name];\n      }\n    }\n  }\n\n  return defaults;\n}\n\n//\n// Ranges and exceptions:\n// Latin-1 Supplement, 0080–00FF\n//  - U+00D7  × Multiplication sign\n//  - U+00F7  ÷ Division sign\n// Latin Extended-A, 0100–017F\n// Latin Extended-B, 0180–024F\n// IPA Extensions, 0250–02AF\n// Spacing Modifier Letters, 02B0–02FF\n//  - U+02C7  ˇ &#711;  Caron\n//  - U+02D8  ˘ &#728;  Breve\n//  - U+02D9  ˙ &#729;  Dot Above\n//  - U+02DA  ˚ &#730;  Ring Above\n//  - U+02DB  ˛ &#731;  Ogonek\n//  - U+02DC  ˜ &#732;  Small Tilde\n//  - U+02DD  ˝ &#733;  Double Acute Accent\n// Latin Extended Additional, 1E00–1EFF\n\nvar extendedWordChars = /^[A-Za-z\\xC0-\\u02C6\\u02C8-\\u02D7\\u02DE-\\u02FF\\u1E00-\\u1EFF]+$/;\nvar reWhitespace = /\\S/;\nvar wordDiff = new Diff();\n\nwordDiff.equals = function (left, right) {\n  if (this.options.ignoreCase) {\n    left = left.toLowerCase();\n    right = right.toLowerCase();\n  }\n\n  return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);\n};\n\nwordDiff.tokenize = function (value) {\n  // All whitespace symbols except newline group into one token, each newline - in separate token\n  var tokens = value.split(/([^\\S\\r\\n]+|[()[\\]{}'\"\\r\\n]|\\b)/); // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.\n\n  for (var i = 0; i < tokens.length - 1; i++) {\n    // If we have an empty string in the next field and we have only word chars before and after, merge\n    if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {\n      tokens[i] += tokens[i + 2];\n      tokens.splice(i + 1, 2);\n      i--;\n    }\n  }\n\n  return tokens;\n};\n\nfunction diffWords(oldStr, newStr, options) {\n  options = generateOptions(options, {\n    ignoreWhitespace: true\n  });\n  return wordDiff.diff(oldStr, newStr, options);\n}\nfunction diffWordsWithSpace(oldStr, newStr, options) {\n  return wordDiff.diff(oldStr, newStr, options);\n}\n\nvar lineDiff = new Diff();\n\nlineDiff.tokenize = function (value) {\n  if (this.options.stripTrailingCr) {\n    // remove one \\r before \\n to match GNU diff's --strip-trailing-cr behavior\n    value = value.replace(/\\r\\n/g, '\\n');\n  }\n\n  var retLines = [],\n      linesAndNewlines = value.split(/(\\n|\\r\\n)/); // Ignore the final empty token that occurs if the string ends with a new line\n\n  if (!linesAndNewlines[linesAndNewlines.length - 1]) {\n    linesAndNewlines.pop();\n  } // Merge the content and line separators into single tokens\n\n\n  for (var i = 0; i < linesAndNewlines.length; i++) {\n    var line = linesAndNewlines[i];\n\n    if (i % 2 && !this.options.newlineIsToken) {\n      retLines[retLines.length - 1] += line;\n    } else {\n      if (this.options.ignoreWhitespace) {\n        line = line.trim();\n      }\n\n      retLines.push(line);\n    }\n  }\n\n  return retLines;\n};\n\nfunction diffLines(oldStr, newStr, callback) {\n  return lineDiff.diff(oldStr, newStr, callback);\n}\nfunction diffTrimmedLines(oldStr, newStr, callback) {\n  var options = generateOptions(callback, {\n    ignoreWhitespace: true\n  });\n  return lineDiff.diff(oldStr, newStr, options);\n}\n\nvar sentenceDiff = new Diff();\n\nsentenceDiff.tokenize = function (value) {\n  return value.split(/(\\S.+?[.!?])(?=\\s+|$)/);\n};\n\nfunction diffSentences(oldStr, newStr, callback) {\n  return sentenceDiff.diff(oldStr, newStr, callback);\n}\n\nvar cssDiff = new Diff();\n\ncssDiff.tokenize = function (value) {\n  return value.split(/([{}:;,]|\\s+)/);\n};\n\nfunction diffCss(oldStr, newStr, callback) {\n  return cssDiff.diff(oldStr, newStr, callback);\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar objectPrototypeToString = Object.prototype.toString;\nvar jsonDiff = new Diff(); // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a\n// dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:\n\njsonDiff.useLongestToken = true;\njsonDiff.tokenize = lineDiff.tokenize;\n\njsonDiff.castInput = function (value) {\n  var _this$options = this.options,\n      undefinedReplacement = _this$options.undefinedReplacement,\n      _this$options$stringi = _this$options.stringifyReplacer,\n      stringifyReplacer = _this$options$stringi === void 0 ? function (k, v) {\n    return typeof v === 'undefined' ? undefinedReplacement : v;\n  } : _this$options$stringi;\n  return typeof value === 'string' ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, '  ');\n};\n\njsonDiff.equals = function (left, right) {\n  return Diff.prototype.equals.call(jsonDiff, left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'));\n};\n\nfunction diffJson(oldObj, newObj, options) {\n  return jsonDiff.diff(oldObj, newObj, options);\n} // This function handles the presence of circular references by bailing out when encountering an\n// object that is already on the \"stack\" of items being processed. Accepts an optional replacer\n\nfunction canonicalize(obj, stack, replacementStack, replacer, key) {\n  stack = stack || [];\n  replacementStack = replacementStack || [];\n\n  if (replacer) {\n    obj = replacer(key, obj);\n  }\n\n  var i;\n\n  for (i = 0; i < stack.length; i += 1) {\n    if (stack[i] === obj) {\n      return replacementStack[i];\n    }\n  }\n\n  var canonicalizedObj;\n\n  if ('[object Array]' === objectPrototypeToString.call(obj)) {\n    stack.push(obj);\n    canonicalizedObj = new Array(obj.length);\n    replacementStack.push(canonicalizedObj);\n\n    for (i = 0; i < obj.length; i += 1) {\n      canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);\n    }\n\n    stack.pop();\n    replacementStack.pop();\n    return canonicalizedObj;\n  }\n\n  if (obj && obj.toJSON) {\n    obj = obj.toJSON();\n  }\n\n  if (_typeof(obj) === 'object' && obj !== null) {\n    stack.push(obj);\n    canonicalizedObj = {};\n    replacementStack.push(canonicalizedObj);\n\n    var sortedKeys = [],\n        _key;\n\n    for (_key in obj) {\n      /* istanbul ignore else */\n      if (obj.hasOwnProperty(_key)) {\n        sortedKeys.push(_key);\n      }\n    }\n\n    sortedKeys.sort();\n\n    for (i = 0; i < sortedKeys.length; i += 1) {\n      _key = sortedKeys[i];\n      canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);\n    }\n\n    stack.pop();\n    replacementStack.pop();\n  } else {\n    canonicalizedObj = obj;\n  }\n\n  return canonicalizedObj;\n}\n\nvar arrayDiff = new Diff();\n\narrayDiff.tokenize = function (value) {\n  return value.slice();\n};\n\narrayDiff.join = arrayDiff.removeEmpty = function (value) {\n  return value;\n};\n\nfunction diffArrays(oldArr, newArr, callback) {\n  return arrayDiff.diff(oldArr, newArr, callback);\n}\n\nfunction parsePatch(uniDiff) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var diffstr = uniDiff.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\n      delimiters = uniDiff.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\n      list = [],\n      i = 0;\n\n  function parseIndex() {\n    var index = {};\n    list.push(index); // Parse diff metadata\n\n    while (i < diffstr.length) {\n      var line = diffstr[i]; // File header found, end parsing diff metadata\n\n      if (/^(\\-\\-\\-|\\+\\+\\+|@@)\\s/.test(line)) {\n        break;\n      } // Diff index\n\n\n      var header = /^(?:Index:|diff(?: -r \\w+)+)\\s+(.+?)\\s*$/.exec(line);\n\n      if (header) {\n        index.index = header[1];\n      }\n\n      i++;\n    } // Parse file headers if they are defined. Unified diff requires them, but\n    // there's no technical issues to have an isolated hunk without file header\n\n\n    parseFileHeader(index);\n    parseFileHeader(index); // Parse hunks\n\n    index.hunks = [];\n\n    while (i < diffstr.length) {\n      var _line = diffstr[i];\n\n      if (/^(Index:|diff|\\-\\-\\-|\\+\\+\\+)\\s/.test(_line)) {\n        break;\n      } else if (/^@@/.test(_line)) {\n        index.hunks.push(parseHunk());\n      } else if (_line && options.strict) {\n        // Ignore unexpected content unless in strict mode\n        throw new Error('Unknown line ' + (i + 1) + ' ' + JSON.stringify(_line));\n      } else {\n        i++;\n      }\n    }\n  } // Parses the --- and +++ headers, if none are found, no lines\n  // are consumed.\n\n\n  function parseFileHeader(index) {\n    var fileHeader = /^(---|\\+\\+\\+)\\s+(.*)$/.exec(diffstr[i]);\n\n    if (fileHeader) {\n      var keyPrefix = fileHeader[1] === '---' ? 'old' : 'new';\n      var data = fileHeader[2].split('\\t', 2);\n      var fileName = data[0].replace(/\\\\\\\\/g, '\\\\');\n\n      if (/^\".*\"$/.test(fileName)) {\n        fileName = fileName.substr(1, fileName.length - 2);\n      }\n\n      index[keyPrefix + 'FileName'] = fileName;\n      index[keyPrefix + 'Header'] = (data[1] || '').trim();\n      i++;\n    }\n  } // Parses a hunk\n  // This assumes that we are at the start of a hunk.\n\n\n  function parseHunk() {\n    var chunkHeaderIndex = i,\n        chunkHeaderLine = diffstr[i++],\n        chunkHeader = chunkHeaderLine.split(/@@ -(\\d+)(?:,(\\d+))? \\+(\\d+)(?:,(\\d+))? @@/);\n    var hunk = {\n      oldStart: +chunkHeader[1],\n      oldLines: typeof chunkHeader[2] === 'undefined' ? 1 : +chunkHeader[2],\n      newStart: +chunkHeader[3],\n      newLines: typeof chunkHeader[4] === 'undefined' ? 1 : +chunkHeader[4],\n      lines: [],\n      linedelimiters: []\n    }; // Unified Diff Format quirk: If the chunk size is 0,\n    // the first number is one lower than one would expect.\n    // https://www.artima.com/weblogs/viewpost.jsp?thread=164293\n\n    if (hunk.oldLines === 0) {\n      hunk.oldStart += 1;\n    }\n\n    if (hunk.newLines === 0) {\n      hunk.newStart += 1;\n    }\n\n    var addCount = 0,\n        removeCount = 0;\n\n    for (; i < diffstr.length; i++) {\n      // Lines starting with '---' could be mistaken for the \"remove line\" operation\n      // But they could be the header for the next file. Therefore prune such cases out.\n      if (diffstr[i].indexOf('--- ') === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf('+++ ') === 0 && diffstr[i + 2].indexOf('@@') === 0) {\n        break;\n      }\n\n      var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? ' ' : diffstr[i][0];\n\n      if (operation === '+' || operation === '-' || operation === ' ' || operation === '\\\\') {\n        hunk.lines.push(diffstr[i]);\n        hunk.linedelimiters.push(delimiters[i] || '\\n');\n\n        if (operation === '+') {\n          addCount++;\n        } else if (operation === '-') {\n          removeCount++;\n        } else if (operation === ' ') {\n          addCount++;\n          removeCount++;\n        }\n      } else {\n        break;\n      }\n    } // Handle the empty block count case\n\n\n    if (!addCount && hunk.newLines === 1) {\n      hunk.newLines = 0;\n    }\n\n    if (!removeCount && hunk.oldLines === 1) {\n      hunk.oldLines = 0;\n    } // Perform optional sanity checking\n\n\n    if (options.strict) {\n      if (addCount !== hunk.newLines) {\n        throw new Error('Added line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n      }\n\n      if (removeCount !== hunk.oldLines) {\n        throw new Error('Removed line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n      }\n    }\n\n    return hunk;\n  }\n\n  while (i < diffstr.length) {\n    parseIndex();\n  }\n\n  return list;\n}\n\n// Iterator that traverses in the range of [min, max], stepping\n// by distance from a given start position. I.e. for [0, 4], with\n// start of 2, this will iterate 2, 3, 1, 4, 0.\nfunction distanceIterator (start, minLine, maxLine) {\n  var wantForward = true,\n      backwardExhausted = false,\n      forwardExhausted = false,\n      localOffset = 1;\n  return function iterator() {\n    if (wantForward && !forwardExhausted) {\n      if (backwardExhausted) {\n        localOffset++;\n      } else {\n        wantForward = false;\n      } // Check if trying to fit beyond text length, and if not, check it fits\n      // after offset location (or desired location on first iteration)\n\n\n      if (start + localOffset <= maxLine) {\n        return localOffset;\n      }\n\n      forwardExhausted = true;\n    }\n\n    if (!backwardExhausted) {\n      if (!forwardExhausted) {\n        wantForward = true;\n      } // Check if trying to fit before text beginning, and if not, check it fits\n      // before offset location\n\n\n      if (minLine <= start - localOffset) {\n        return -localOffset++;\n      }\n\n      backwardExhausted = true;\n      return iterator();\n    } // We tried to fit hunk before text beginning and beyond text length, then\n    // hunk can't fit on the text. Return undefined\n\n  };\n}\n\nfunction applyPatch(source, uniDiff) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (typeof uniDiff === 'string') {\n    uniDiff = parsePatch(uniDiff);\n  }\n\n  if (Array.isArray(uniDiff)) {\n    if (uniDiff.length > 1) {\n      throw new Error('applyPatch only works with a single input.');\n    }\n\n    uniDiff = uniDiff[0];\n  } // Apply the diff to the input\n\n\n  var lines = source.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\n      delimiters = source.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\n      hunks = uniDiff.hunks,\n      compareLine = options.compareLine || function (lineNumber, line, operation, patchContent) {\n    return line === patchContent;\n  },\n      errorCount = 0,\n      fuzzFactor = options.fuzzFactor || 0,\n      minLine = 0,\n      offset = 0,\n      removeEOFNL,\n      addEOFNL;\n  /**\n   * Checks if the hunk exactly fits on the provided location\n   */\n\n\n  function hunkFits(hunk, toPos) {\n    for (var j = 0; j < hunk.lines.length; j++) {\n      var line = hunk.lines[j],\n          operation = line.length > 0 ? line[0] : ' ',\n          content = line.length > 0 ? line.substr(1) : line;\n\n      if (operation === ' ' || operation === '-') {\n        // Context sanity check\n        if (!compareLine(toPos + 1, lines[toPos], operation, content)) {\n          errorCount++;\n\n          if (errorCount > fuzzFactor) {\n            return false;\n          }\n        }\n\n        toPos++;\n      }\n    }\n\n    return true;\n  } // Search best fit offsets for each hunk based on the previous ones\n\n\n  for (var i = 0; i < hunks.length; i++) {\n    var hunk = hunks[i],\n        maxLine = lines.length - hunk.oldLines,\n        localOffset = 0,\n        toPos = offset + hunk.oldStart - 1;\n    var iterator = distanceIterator(toPos, minLine, maxLine);\n\n    for (; localOffset !== undefined; localOffset = iterator()) {\n      if (hunkFits(hunk, toPos + localOffset)) {\n        hunk.offset = offset += localOffset;\n        break;\n      }\n    }\n\n    if (localOffset === undefined) {\n      return false;\n    } // Set lower text limit to end of the current hunk, so next ones don't try\n    // to fit over already patched text\n\n\n    minLine = hunk.offset + hunk.oldStart + hunk.oldLines;\n  } // Apply patch hunks\n\n\n  var diffOffset = 0;\n\n  for (var _i = 0; _i < hunks.length; _i++) {\n    var _hunk = hunks[_i],\n        _toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1;\n\n    diffOffset += _hunk.newLines - _hunk.oldLines;\n\n    for (var j = 0; j < _hunk.lines.length; j++) {\n      var line = _hunk.lines[j],\n          operation = line.length > 0 ? line[0] : ' ',\n          content = line.length > 0 ? line.substr(1) : line,\n          delimiter = _hunk.linedelimiters && _hunk.linedelimiters[j] || '\\n';\n\n      if (operation === ' ') {\n        _toPos++;\n      } else if (operation === '-') {\n        lines.splice(_toPos, 1);\n        delimiters.splice(_toPos, 1);\n        /* istanbul ignore else */\n      } else if (operation === '+') {\n        lines.splice(_toPos, 0, content);\n        delimiters.splice(_toPos, 0, delimiter);\n        _toPos++;\n      } else if (operation === '\\\\') {\n        var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;\n\n        if (previousOperation === '+') {\n          removeEOFNL = true;\n        } else if (previousOperation === '-') {\n          addEOFNL = true;\n        }\n      }\n    }\n  } // Handle EOFNL insertion/removal\n\n\n  if (removeEOFNL) {\n    while (!lines[lines.length - 1]) {\n      lines.pop();\n      delimiters.pop();\n    }\n  } else if (addEOFNL) {\n    lines.push('');\n    delimiters.push('\\n');\n  }\n\n  for (var _k = 0; _k < lines.length - 1; _k++) {\n    lines[_k] = lines[_k] + delimiters[_k];\n  }\n\n  return lines.join('');\n} // Wrapper that supports multiple file patches via callbacks.\n\nfunction applyPatches(uniDiff, options) {\n  if (typeof uniDiff === 'string') {\n    uniDiff = parsePatch(uniDiff);\n  }\n\n  var currentIndex = 0;\n\n  function processIndex() {\n    var index = uniDiff[currentIndex++];\n\n    if (!index) {\n      return options.complete();\n    }\n\n    options.loadFile(index, function (err, data) {\n      if (err) {\n        return options.complete(err);\n      }\n\n      var updatedContent = applyPatch(data, index, options);\n      options.patched(index, updatedContent, function (err) {\n        if (err) {\n          return options.complete(err);\n        }\n\n        processIndex();\n      });\n    });\n  }\n\n  processIndex();\n}\n\nfunction structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof options.context === 'undefined') {\n    options.context = 4;\n  }\n\n  var diff = diffLines(oldStr, newStr, options);\n\n  if (!diff) {\n    return;\n  }\n\n  diff.push({\n    value: '',\n    lines: []\n  }); // Append an empty value to make cleanup easier\n\n  function contextLines(lines) {\n    return lines.map(function (entry) {\n      return ' ' + entry;\n    });\n  }\n\n  var hunks = [];\n  var oldRangeStart = 0,\n      newRangeStart = 0,\n      curRange = [],\n      oldLine = 1,\n      newLine = 1;\n\n  var _loop = function _loop(i) {\n    var current = diff[i],\n        lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');\n    current.lines = lines;\n\n    if (current.added || current.removed) {\n      var _curRange;\n\n      // If we have previous context, start with that\n      if (!oldRangeStart) {\n        var prev = diff[i - 1];\n        oldRangeStart = oldLine;\n        newRangeStart = newLine;\n\n        if (prev) {\n          curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];\n          oldRangeStart -= curRange.length;\n          newRangeStart -= curRange.length;\n        }\n      } // Output our changes\n\n\n      (_curRange = curRange).push.apply(_curRange, _toConsumableArray(lines.map(function (entry) {\n        return (current.added ? '+' : '-') + entry;\n      }))); // Track the updated file position\n\n\n      if (current.added) {\n        newLine += lines.length;\n      } else {\n        oldLine += lines.length;\n      }\n    } else {\n      // Identical context lines. Track line changes\n      if (oldRangeStart) {\n        // Close out any changes that have been output (or join overlapping)\n        if (lines.length <= options.context * 2 && i < diff.length - 2) {\n          var _curRange2;\n\n          // Overlapping\n          (_curRange2 = curRange).push.apply(_curRange2, _toConsumableArray(contextLines(lines)));\n        } else {\n          var _curRange3;\n\n          // end the range and output\n          var contextSize = Math.min(lines.length, options.context);\n\n          (_curRange3 = curRange).push.apply(_curRange3, _toConsumableArray(contextLines(lines.slice(0, contextSize))));\n\n          var hunk = {\n            oldStart: oldRangeStart,\n            oldLines: oldLine - oldRangeStart + contextSize,\n            newStart: newRangeStart,\n            newLines: newLine - newRangeStart + contextSize,\n            lines: curRange\n          };\n\n          if (i >= diff.length - 2 && lines.length <= options.context) {\n            // EOF is inside this hunk\n            var oldEOFNewline = /\\n$/.test(oldStr);\n            var newEOFNewline = /\\n$/.test(newStr);\n            var noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;\n\n            if (!oldEOFNewline && noNlBeforeAdds && oldStr.length > 0) {\n              // special case: old has no eol and no trailing context; no-nl can end up before adds\n              // however, if the old file is empty, do not output the no-nl line\n              curRange.splice(hunk.oldLines, 0, '\\\\ No newline at end of file');\n            }\n\n            if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) {\n              curRange.push('\\\\ No newline at end of file');\n            }\n          }\n\n          hunks.push(hunk);\n          oldRangeStart = 0;\n          newRangeStart = 0;\n          curRange = [];\n        }\n      }\n\n      oldLine += lines.length;\n      newLine += lines.length;\n    }\n  };\n\n  for (var i = 0; i < diff.length; i++) {\n    _loop(i);\n  }\n\n  return {\n    oldFileName: oldFileName,\n    newFileName: newFileName,\n    oldHeader: oldHeader,\n    newHeader: newHeader,\n    hunks: hunks\n  };\n}\nfunction formatPatch(diff) {\n  if (Array.isArray(diff)) {\n    return diff.map(formatPatch).join('\\n');\n  }\n\n  var ret = [];\n\n  if (diff.oldFileName == diff.newFileName) {\n    ret.push('Index: ' + diff.oldFileName);\n  }\n\n  ret.push('===================================================================');\n  ret.push('--- ' + diff.oldFileName + (typeof diff.oldHeader === 'undefined' ? '' : '\\t' + diff.oldHeader));\n  ret.push('+++ ' + diff.newFileName + (typeof diff.newHeader === 'undefined' ? '' : '\\t' + diff.newHeader));\n\n  for (var i = 0; i < diff.hunks.length; i++) {\n    var hunk = diff.hunks[i]; // Unified Diff Format quirk: If the chunk size is 0,\n    // the first number is one lower than one would expect.\n    // https://www.artima.com/weblogs/viewpost.jsp?thread=164293\n\n    if (hunk.oldLines === 0) {\n      hunk.oldStart -= 1;\n    }\n\n    if (hunk.newLines === 0) {\n      hunk.newStart -= 1;\n    }\n\n    ret.push('@@ -' + hunk.oldStart + ',' + hunk.oldLines + ' +' + hunk.newStart + ',' + hunk.newLines + ' @@');\n    ret.push.apply(ret, hunk.lines);\n  }\n\n  return ret.join('\\n') + '\\n';\n}\nfunction createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n  return formatPatch(structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options));\n}\nfunction createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {\n  return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);\n}\n\nfunction arrayEqual(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  return arrayStartsWith(a, b);\n}\nfunction arrayStartsWith(array, start) {\n  if (start.length > array.length) {\n    return false;\n  }\n\n  for (var i = 0; i < start.length; i++) {\n    if (start[i] !== array[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction calcLineCount(hunk) {\n  var _calcOldNewLineCount = calcOldNewLineCount(hunk.lines),\n      oldLines = _calcOldNewLineCount.oldLines,\n      newLines = _calcOldNewLineCount.newLines;\n\n  if (oldLines !== undefined) {\n    hunk.oldLines = oldLines;\n  } else {\n    delete hunk.oldLines;\n  }\n\n  if (newLines !== undefined) {\n    hunk.newLines = newLines;\n  } else {\n    delete hunk.newLines;\n  }\n}\nfunction merge(mine, theirs, base) {\n  mine = loadPatch(mine, base);\n  theirs = loadPatch(theirs, base);\n  var ret = {}; // For index we just let it pass through as it doesn't have any necessary meaning.\n  // Leaving sanity checks on this to the API consumer that may know more about the\n  // meaning in their own context.\n\n  if (mine.index || theirs.index) {\n    ret.index = mine.index || theirs.index;\n  }\n\n  if (mine.newFileName || theirs.newFileName) {\n    if (!fileNameChanged(mine)) {\n      // No header or no change in ours, use theirs (and ours if theirs does not exist)\n      ret.oldFileName = theirs.oldFileName || mine.oldFileName;\n      ret.newFileName = theirs.newFileName || mine.newFileName;\n      ret.oldHeader = theirs.oldHeader || mine.oldHeader;\n      ret.newHeader = theirs.newHeader || mine.newHeader;\n    } else if (!fileNameChanged(theirs)) {\n      // No header or no change in theirs, use ours\n      ret.oldFileName = mine.oldFileName;\n      ret.newFileName = mine.newFileName;\n      ret.oldHeader = mine.oldHeader;\n      ret.newHeader = mine.newHeader;\n    } else {\n      // Both changed... figure it out\n      ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);\n      ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);\n      ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);\n      ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);\n    }\n  }\n\n  ret.hunks = [];\n  var mineIndex = 0,\n      theirsIndex = 0,\n      mineOffset = 0,\n      theirsOffset = 0;\n\n  while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {\n    var mineCurrent = mine.hunks[mineIndex] || {\n      oldStart: Infinity\n    },\n        theirsCurrent = theirs.hunks[theirsIndex] || {\n      oldStart: Infinity\n    };\n\n    if (hunkBefore(mineCurrent, theirsCurrent)) {\n      // This patch does not overlap with any of the others, yay.\n      ret.hunks.push(cloneHunk(mineCurrent, mineOffset));\n      mineIndex++;\n      theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;\n    } else if (hunkBefore(theirsCurrent, mineCurrent)) {\n      // This patch does not overlap with any of the others, yay.\n      ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));\n      theirsIndex++;\n      mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;\n    } else {\n      // Overlap, merge as best we can\n      var mergedHunk = {\n        oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),\n        oldLines: 0,\n        newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),\n        newLines: 0,\n        lines: []\n      };\n      mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);\n      theirsIndex++;\n      mineIndex++;\n      ret.hunks.push(mergedHunk);\n    }\n  }\n\n  return ret;\n}\n\nfunction loadPatch(param, base) {\n  if (typeof param === 'string') {\n    if (/^@@/m.test(param) || /^Index:/m.test(param)) {\n      return parsePatch(param)[0];\n    }\n\n    if (!base) {\n      throw new Error('Must provide a base reference or pass in a patch');\n    }\n\n    return structuredPatch(undefined, undefined, base, param);\n  }\n\n  return param;\n}\n\nfunction fileNameChanged(patch) {\n  return patch.newFileName && patch.newFileName !== patch.oldFileName;\n}\n\nfunction selectField(index, mine, theirs) {\n  if (mine === theirs) {\n    return mine;\n  } else {\n    index.conflict = true;\n    return {\n      mine: mine,\n      theirs: theirs\n    };\n  }\n}\n\nfunction hunkBefore(test, check) {\n  return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;\n}\n\nfunction cloneHunk(hunk, offset) {\n  return {\n    oldStart: hunk.oldStart,\n    oldLines: hunk.oldLines,\n    newStart: hunk.newStart + offset,\n    newLines: hunk.newLines,\n    lines: hunk.lines\n  };\n}\n\nfunction mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {\n  // This will generally result in a conflicted hunk, but there are cases where the context\n  // is the only overlap where we can successfully merge the content here.\n  var mine = {\n    offset: mineOffset,\n    lines: mineLines,\n    index: 0\n  },\n      their = {\n    offset: theirOffset,\n    lines: theirLines,\n    index: 0\n  }; // Handle any leading content\n\n  insertLeading(hunk, mine, their);\n  insertLeading(hunk, their, mine); // Now in the overlap content. Scan through and select the best changes from each.\n\n  while (mine.index < mine.lines.length && their.index < their.lines.length) {\n    var mineCurrent = mine.lines[mine.index],\n        theirCurrent = their.lines[their.index];\n\n    if ((mineCurrent[0] === '-' || mineCurrent[0] === '+') && (theirCurrent[0] === '-' || theirCurrent[0] === '+')) {\n      // Both modified ...\n      mutualChange(hunk, mine, their);\n    } else if (mineCurrent[0] === '+' && theirCurrent[0] === ' ') {\n      var _hunk$lines;\n\n      // Mine inserted\n      (_hunk$lines = hunk.lines).push.apply(_hunk$lines, _toConsumableArray(collectChange(mine)));\n    } else if (theirCurrent[0] === '+' && mineCurrent[0] === ' ') {\n      var _hunk$lines2;\n\n      // Theirs inserted\n      (_hunk$lines2 = hunk.lines).push.apply(_hunk$lines2, _toConsumableArray(collectChange(their)));\n    } else if (mineCurrent[0] === '-' && theirCurrent[0] === ' ') {\n      // Mine removed or edited\n      removal(hunk, mine, their);\n    } else if (theirCurrent[0] === '-' && mineCurrent[0] === ' ') {\n      // Their removed or edited\n      removal(hunk, their, mine, true);\n    } else if (mineCurrent === theirCurrent) {\n      // Context identity\n      hunk.lines.push(mineCurrent);\n      mine.index++;\n      their.index++;\n    } else {\n      // Context mismatch\n      conflict(hunk, collectChange(mine), collectChange(their));\n    }\n  } // Now push anything that may be remaining\n\n\n  insertTrailing(hunk, mine);\n  insertTrailing(hunk, their);\n  calcLineCount(hunk);\n}\n\nfunction mutualChange(hunk, mine, their) {\n  var myChanges = collectChange(mine),\n      theirChanges = collectChange(their);\n\n  if (allRemoves(myChanges) && allRemoves(theirChanges)) {\n    // Special case for remove changes that are supersets of one another\n    if (arrayStartsWith(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {\n      var _hunk$lines3;\n\n      (_hunk$lines3 = hunk.lines).push.apply(_hunk$lines3, _toConsumableArray(myChanges));\n\n      return;\n    } else if (arrayStartsWith(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {\n      var _hunk$lines4;\n\n      (_hunk$lines4 = hunk.lines).push.apply(_hunk$lines4, _toConsumableArray(theirChanges));\n\n      return;\n    }\n  } else if (arrayEqual(myChanges, theirChanges)) {\n    var _hunk$lines5;\n\n    (_hunk$lines5 = hunk.lines).push.apply(_hunk$lines5, _toConsumableArray(myChanges));\n\n    return;\n  }\n\n  conflict(hunk, myChanges, theirChanges);\n}\n\nfunction removal(hunk, mine, their, swap) {\n  var myChanges = collectChange(mine),\n      theirChanges = collectContext(their, myChanges);\n\n  if (theirChanges.merged) {\n    var _hunk$lines6;\n\n    (_hunk$lines6 = hunk.lines).push.apply(_hunk$lines6, _toConsumableArray(theirChanges.merged));\n  } else {\n    conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);\n  }\n}\n\nfunction conflict(hunk, mine, their) {\n  hunk.conflict = true;\n  hunk.lines.push({\n    conflict: true,\n    mine: mine,\n    theirs: their\n  });\n}\n\nfunction insertLeading(hunk, insert, their) {\n  while (insert.offset < their.offset && insert.index < insert.lines.length) {\n    var line = insert.lines[insert.index++];\n    hunk.lines.push(line);\n    insert.offset++;\n  }\n}\n\nfunction insertTrailing(hunk, insert) {\n  while (insert.index < insert.lines.length) {\n    var line = insert.lines[insert.index++];\n    hunk.lines.push(line);\n  }\n}\n\nfunction collectChange(state) {\n  var ret = [],\n      operation = state.lines[state.index][0];\n\n  while (state.index < state.lines.length) {\n    var line = state.lines[state.index]; // Group additions that are immediately after subtractions and treat them as one \"atomic\" modify change.\n\n    if (operation === '-' && line[0] === '+') {\n      operation = '+';\n    }\n\n    if (operation === line[0]) {\n      ret.push(line);\n      state.index++;\n    } else {\n      break;\n    }\n  }\n\n  return ret;\n}\n\nfunction collectContext(state, matchChanges) {\n  var changes = [],\n      merged = [],\n      matchIndex = 0,\n      contextChanges = false,\n      conflicted = false;\n\n  while (matchIndex < matchChanges.length && state.index < state.lines.length) {\n    var change = state.lines[state.index],\n        match = matchChanges[matchIndex]; // Once we've hit our add, then we are done\n\n    if (match[0] === '+') {\n      break;\n    }\n\n    contextChanges = contextChanges || change[0] !== ' ';\n    merged.push(match);\n    matchIndex++; // Consume any additions in the other block as a conflict to attempt\n    // to pull in the remaining context after this\n\n    if (change[0] === '+') {\n      conflicted = true;\n\n      while (change[0] === '+') {\n        changes.push(change);\n        change = state.lines[++state.index];\n      }\n    }\n\n    if (match.substr(1) === change.substr(1)) {\n      changes.push(change);\n      state.index++;\n    } else {\n      conflicted = true;\n    }\n  }\n\n  if ((matchChanges[matchIndex] || '')[0] === '+' && contextChanges) {\n    conflicted = true;\n  }\n\n  if (conflicted) {\n    return changes;\n  }\n\n  while (matchIndex < matchChanges.length) {\n    merged.push(matchChanges[matchIndex++]);\n  }\n\n  return {\n    merged: merged,\n    changes: changes\n  };\n}\n\nfunction allRemoves(changes) {\n  return changes.reduce(function (prev, change) {\n    return prev && change[0] === '-';\n  }, true);\n}\n\nfunction skipRemoveSuperset(state, removeChanges, delta) {\n  for (var i = 0; i < delta; i++) {\n    var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);\n\n    if (state.lines[state.index + i] !== ' ' + changeContent) {\n      return false;\n    }\n  }\n\n  state.index += delta;\n  return true;\n}\n\nfunction calcOldNewLineCount(lines) {\n  var oldLines = 0;\n  var newLines = 0;\n  lines.forEach(function (line) {\n    if (typeof line !== 'string') {\n      var myCount = calcOldNewLineCount(line.mine);\n      var theirCount = calcOldNewLineCount(line.theirs);\n\n      if (oldLines !== undefined) {\n        if (myCount.oldLines === theirCount.oldLines) {\n          oldLines += myCount.oldLines;\n        } else {\n          oldLines = undefined;\n        }\n      }\n\n      if (newLines !== undefined) {\n        if (myCount.newLines === theirCount.newLines) {\n          newLines += myCount.newLines;\n        } else {\n          newLines = undefined;\n        }\n      }\n    } else {\n      if (newLines !== undefined && (line[0] === '+' || line[0] === ' ')) {\n        newLines++;\n      }\n\n      if (oldLines !== undefined && (line[0] === '-' || line[0] === ' ')) {\n        oldLines++;\n      }\n    }\n  });\n  return {\n    oldLines: oldLines,\n    newLines: newLines\n  };\n}\n\nfunction reversePatch(structuredPatch) {\n  if (Array.isArray(structuredPatch)) {\n    return structuredPatch.map(reversePatch).reverse();\n  }\n\n  return _objectSpread2(_objectSpread2({}, structuredPatch), {}, {\n    oldFileName: structuredPatch.newFileName,\n    oldHeader: structuredPatch.newHeader,\n    newFileName: structuredPatch.oldFileName,\n    newHeader: structuredPatch.oldHeader,\n    hunks: structuredPatch.hunks.map(function (hunk) {\n      return {\n        oldLines: hunk.newLines,\n        oldStart: hunk.newStart,\n        newLines: hunk.oldLines,\n        newStart: hunk.oldStart,\n        linedelimiters: hunk.linedelimiters,\n        lines: hunk.lines.map(function (l) {\n          if (l.startsWith('-')) {\n            return \"+\".concat(l.slice(1));\n          }\n\n          if (l.startsWith('+')) {\n            return \"-\".concat(l.slice(1));\n          }\n\n          return l;\n        })\n      };\n    })\n  });\n}\n\n// See: http://code.google.com/p/google-diff-match-patch/wiki/API\nfunction convertChangesToDMP(changes) {\n  var ret = [],\n      change,\n      operation;\n\n  for (var i = 0; i < changes.length; i++) {\n    change = changes[i];\n\n    if (change.added) {\n      operation = 1;\n    } else if (change.removed) {\n      operation = -1;\n    } else {\n      operation = 0;\n    }\n\n    ret.push([operation, change.value]);\n  }\n\n  return ret;\n}\n\nfunction convertChangesToXML(changes) {\n  var ret = [];\n\n  for (var i = 0; i < changes.length; i++) {\n    var change = changes[i];\n\n    if (change.added) {\n      ret.push('<ins>');\n    } else if (change.removed) {\n      ret.push('<del>');\n    }\n\n    ret.push(escapeHTML(change.value));\n\n    if (change.added) {\n      ret.push('</ins>');\n    } else if (change.removed) {\n      ret.push('</del>');\n    }\n  }\n\n  return ret.join('');\n}\n\nfunction escapeHTML(s) {\n  var n = s;\n  n = n.replace(/&/g, '&amp;');\n  n = n.replace(/</g, '&lt;');\n  n = n.replace(/>/g, '&gt;');\n  n = n.replace(/\"/g, '&quot;');\n  return n;\n}\n\nexport { Diff, applyPatch, applyPatches, canonicalize, convertChangesToDMP, convertChangesToXML, createPatch, createTwoFilesPatch, diffArrays, diffChars, diffCss, diffJson, diffLines, diffSentences, diffTrimmedLines, diffWords, diffWordsWithSpace, formatPatch, merge, parsePatch, reversePatch, structuredPatch };\n","import * as jsdiff from 'diff';\n\nwindow.jsdiff = jsdiff;"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Diff","buildValues","diff","lastComponent","newString","oldString","useLongestToken","nextComponent","components","push","previousComponent","reverse","componentPos","componentLen","length","newPos","oldPos","component","removed","join","slice","count","added","tmp","map","i","oldValue","finalComponent","equals","pop","_options$timeout","options","arguments","undefined","callback","this","self","done","setTimeout","castInput","removeEmpty","tokenize","newLen","oldLen","editLength","maxEditLength","Math","min","maxExecutionTime","timeout","Infinity","abortAfterTimestamp","Date","now","bestPath","extractCommon","minDiagonalToConsider","maxDiagonalToConsider","execEditLength","diagonalPath","max","basePath","removePath","addPath","canAdd","addPathNewPos","canRemove","addToPath","exec","ret","path","oldPosInc","last","commonCount","left","right","comparator","ignoreCase","toLowerCase","array","split","chars","characterDiff","diffChars","oldStr","newStr","generateOptions","defaults","name","extendedWordChars","reWhitespace","wordDiff","diffWords","ignoreWhitespace","diffWordsWithSpace","test","tokens","splice","lineDiff","diffLines","diffTrimmedLines","stripTrailingCr","replace","retLines","linesAndNewlines","line","newlineIsToken","trim","sentenceDiff","diffSentences","cssDiff","diffCss","_typeof","iterator","constructor","_defineProperty","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","apply","_objectSpread2","target","source","forEach","getOwnPropertyDescriptors","defineProperties","_toConsumableArray","arr","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","iter","from","_iterableToArray","minLen","n","toString","_unsupportedIterableToArray","TypeError","_nonIterableSpread","len","arr2","objectPrototypeToString","jsonDiff","diffJson","oldObj","newObj","canonicalize","stack","replacementStack","replacer","canonicalizedObj","toJSON","_key","sortedKeys","sort","_this$options","undefinedReplacement","_this$options$stringi","stringifyReplacer","k","v","JSON","stringify","arrayDiff","diffArrays","oldArr","newArr","parsePatch","uniDiff","diffstr","delimiters","match","list","parseIndex","index","header","parseFileHeader","hunks","_line","parseHunk","strict","Error","fileHeader","keyPrefix","data","fileName","substr","chunkHeaderIndex","chunkHeader","hunk","oldStart","oldLines","newStart","newLines","lines","linedelimiters","addCount","removeCount","indexOf","operation","distanceIterator","start","minLine","maxLine","wantForward","backwardExhausted","forwardExhausted","localOffset","applyPatch","removeEOFNL","addEOFNL","compareLine","lineNumber","patchContent","errorCount","fuzzFactor","offset","hunkFits","toPos","j","content","diffOffset","_i","_hunk","_toPos","delimiter","previousOperation","_k","applyPatches","currentIndex","processIndex","complete","loadFile","err","updatedContent","patched","structuredPatch","oldFileName","newFileName","oldHeader","newHeader","context","oldRangeStart","newRangeStart","curRange","oldLine","newLine","_loop","current","_curRange","prev","contextLines","entry","_curRange2","_curRange3","contextSize","oldEOFNewline","newEOFNewline","noNlBeforeAdds","formatPatch","createTwoFilesPatch","createPatch","arrayStartsWith","calcLineCount","_calcOldNewLineCount","calcOldNewLineCount","merge","mine","theirs","base","loadPatch","fileNameChanged","selectField","mineIndex","theirsIndex","mineOffset","theirsOffset","mineCurrent","theirsCurrent","hunkBefore","cloneHunk","mergedHunk","mergeLines","param","patch","conflict","check","mineLines","theirOffset","theirLines","their","insertLeading","theirCurrent","_hunk$lines","collectChange","_hunk$lines2","removal","mutualChange","insertTrailing","a","b","myChanges","theirChanges","allRemoves","_hunk$lines3","_hunk$lines4","skipRemoveSuperset","_hunk$lines5","swap","_hunk$lines6","state","matchChanges","changes","merged","matchIndex","contextChanges","conflicted","change","collectContext","insert","reduce","removeChanges","delta","changeContent","myCount","theirCount","reversePatch","l","startsWith","concat","convertChangesToDMP","convertChangesToXML","escapeHTML","s","window","jsdiff"],"sourceRoot":""}
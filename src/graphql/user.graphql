scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar JSON @scalar(class: "MLL\\GraphQLScalars\\JSON")

type Query {
    users: [User!]! @all @guard
    user(id: ID @eq): User @find @guard
}
type User {
    id: ID!
    email: String!
    name: String!
    full_name: String!
    name_suffix: String
    employeeid: Int
    first_name: String!
    last_name: String!
    address: String
    phone: String
    featured_image: Int
    time_keeping_type: Int
    user_type: Int
    workplace: Int
    category: Int
    date_of_birth: DateTime
    first_date: DateTime
    last_date: DateTime
    title: String
    position_prefix: Int
    position_1: Int
    position_2: Int
    position_3: Int
    position_rendered: String!
    discipline: Int
    department: Int
    show_on_beta: Int
    resigned: Int
    viewport_uids: String
    leaf_uids: String
    user_id_passport: String
    password: String
    settings: JSON!
    remember_token: String!
    guid: String!
    domain: String!
    email_verified_at: DateTime
    created_at: DateTime
    updated_at: DateTime
    productionRunLines: [Prod_run_line!]! @belongsToMany
}
input CreateUserInput {
    email: String! @rules(apply: ["email", "unique:users,email"])
    name: String!
    full_name: String!
    name_suffix: String
    employeeid: Int
    first_name: String!
    last_name: String!
    address: String
    phone: String
    featured_image: Int
    time_keeping_type: Int
    user_type: Int
    workplace: Int
    category: Int
    date_of_birth: DateTime
    first_date: DateTime
    last_date: DateTime
    title: String
    position_prefix: Int
    position_1: Int
    position_2: Int
    position_3: Int
    position_rendered: String
    discipline: Int
    department: Int
    show_on_beta: Int
    resigned: Int
    viewport_uids: String
    leaf_uids: String
    user_id_passport: String
    password: String! @hash @rules(apply: ["min:8"])
    settings: JSON!
    remember_token: String
    guid: String
    domain: String
    email_verified_at: DateTime
    created_at: DateTime
    updated_at: DateTime
}
input UpdateUserInput {
    id: ID!
    email: String @rules(apply: ["email", "unique:users,email"])
    name: String
    full_name: String
    name_suffix: String
    employeeid: Int
    first_name: String
    last_name: String
    address: String
    phone: String
    featured_image: Int
    time_keeping_type: Int
    user_type: Int
    workplace: Int
    category: Int
    date_of_birth: DateTime
    first_date: DateTime
    last_date: DateTime
    title: String
    position_prefix: Int
    position_1: Int
    position_2: Int
    position_3: Int
    position_rendered: String
    discipline: Int
    department: Int
    show_on_beta: Int
    resigned: Int
    viewport_uids: String
    leaf_uids: String
    user_id_passport: String
    settings: JSON
    password: String @hash @rules(apply: ["min:8"])
    remember_token: String
    guid: String
    domain: String
    email_verified_at: DateTime
    created_at: DateTime
    updated_at: DateTime
}
extend type Mutation {
    createUser(input: CreateUserInput! @spread): User! @guard @create
    updateUser(input: UpdateUserInput! @spread): User @guard @update
    deleteUser(id: ID!): User @guard @delete
    usersUsing: [User!]!
        @guard
        @field(resolver: "App\\GraphQL\\Mutations\\UsersUsing")
}

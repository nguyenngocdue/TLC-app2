scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

extend type Query {
    prod_runs: [Prod_run!]! @all @guard
    prod_run(id: ID @eq): Prod_run @find @guard
}
type Prod_run {
    id: ID!
    prod_run_id: Int!
    date: Date!
    start: String!
    end: String
    status: String!
    created_at: DateTime
    updated_at: DateTime
    users: [User!]! @belongsToMany
    prodRun: Prod_run! @belongsTo
}

input CreateProdRunInput {
    prod_run_id: Int!
    date: Date!
    start: String!
    end: String
    status: String!
    created_at: DateTime
    updated_at: DateTime
}
input UpdateProdRunInput {
    id: ID!
    prod_run_id: Int
    date: Date
    start: String
    end: String
    status: String
    created_at: DateTime
    updated_at: DateTime
}

extend type Mutation {
    createProdRun(input: CreateProdRunInput! @spread): Prod_run! @guard @create
    updateProdRun(input: UpdateProdRunInput! @spread): Prod_run @guard @update
    updateProdRunEvent(input: UpdateProdRunInput! @spread): Prod_run
        @guard
        @field(resolver: "App\\GraphQL\\Mutations\\UpdateProdRunEvent")
    deleteProdRun(id: ID!): Prod_run @guard @delete
}
